svar_set __empty ""
sar_function __tmp_cvar_save    cond "!?__tmp_init_cvar_$1=1" "svar_set __tmp_init_cvar_$1 1; svar_from_cvar __tmp_cvar_$1 $1"
sar_function __tmp_cvar_restore cond  "?__tmp_init_cvar_$1=1" "svar_set __tmp_init_cvar_$1 0; sar_expand $1 $$'$$__tmp_cvar_$1$$'"
sar_function run_quiet "__tmp_cvar_save sar_con_filter; __tmp_cvar_save sar_con_filter_default; sar_con_filter 1; sar_con_filter_default 0; $1 $+2; __tmp_cvar_restore sar_con_filter; __tmp_cvar_restore sar_con_filter_default"

// printing utils
svar_set __ascii_table " !_#_%&___*+,-./0123456789_______ABCDEFGHIJKLMNOPQRSTUVWXYZ______abcdefghijklmnopqrstuvwxyz_____"
sar_function __ascii_get "svar_set __ascii_idx $1; svar_sub __ascii_idx 32; svar_set __ascii_get_res $'$__ascii_table$'; run_quiet sar_expand svar_substr __ascii_get_res $$__ascii_idx 1; __ascii_check"
// bounds checking. if it's negative or the substring failed, print space
sar_function __ascii_check "svar_substr __ascii_idx 0 1; cond ?__ascii_idx=- svar_set __ascii_get_res $' $'; cond ?__ascii_get_res=?__ascii_table svar_set __ascii_get_res $' $'"

// need something to represent the list of loop beginings?
// alternative is a function to find matching brace, slower for big programs?

// function definitions for the actions
sar_function __bf_left  cond "?__current_char=<" "svar_sub __data_ptr 1"
sar_function __bf_right cond "?__current_char=>" "svar_add __data_ptr 1"
sar_function __bf_print cond "?__current_char=." "sar_expand __ascii_get $$__tape_$__data_ptr; sar_expand sar_echo_nolf #ffffff $$'$$__ascii_get_res$$'"
sar_function __bf_inc cond "?__current_char=+" "svar_add __tape_$__data_ptr 1"
sar_function __bf_dec cond "?__current_char=-" "svar_sub __tape_$__data_ptr 1"
sar_function __bf_loop_open       cond "?__current_char=[" "svar_add __stack_ptr 1; sar_expand svar_set __stack_$$__stack_ptr $__prgm_ptr" // record on loop stack
sar_function __bf_loop_close      cond "?__current_char=]" "__bf_loop_close_jump; __bf_loop_close_exit" // go to beginning of loop or nothing
sar_function __bf_loop_close_jump cond "!?__tape_$__data_ptr=0" "sar_expand svar_set __prgm_ptr $$__stack_$__stack_ptr" // jump back to beginning of loop
sar_function __bf_loop_close_exit cond  "?__tape_$__data_ptr=0" "svar_sub __stack_ptr 1" // exit loop

// it even clears negative data ptrs!
sar_function __bf_cleartape    "svar_set __bf_clear_i 0; __bf_cleartape_h; svar_set __bf_clear_i -1; __bf_cleartape_h2"
sar_function __bf_cleartape_h  cond "!?__tape_$__bf_clear_i=?__empty" "svar_set __tape_$__bf_clear_i 0; svar_add __bf_clear_i 1; __bf_cleartape_h"
sar_function __bf_cleartape_h2 cond "!?__tape_$__bf_clear_i=?__empty" "svar_set __tape_$__bf_clear_i 0; svar_sub __bf_clear_i 1; __bf_cleartape_h"

// main interpreter function
sar_function bf_exec "__bf_cleartape; svar_set __bf_program $1; svar_set __data_ptr 0; svar_set __prgm_ptr 0; svar_set __stack_ptr 0; svar_set __current_char a; __bf_main_loop"

sar_function __bf_main_loop     cond "!?__current_char=?__empty" "svar_set __current_char $__bf_program; svar_substr __current_char $__prgm_ptr 1; __bf_left; __bf_right; __bf_print; __bf_inc; __bf_dec; __bf_loop_open; __bf_loop_close; svar_add __prgm_ptr 1; __bf_main_loop_end; __bf_main_loop"
sar_function __bf_main_loop_end cond  "?__current_char=?__empty" "sar_expand sar_echo ffffff $$'$$'" // end it with a newline

// debug function
sar_function bf_debug "echo prgm: $__current_char @ $__prgm_ptr; sar_expand echo data: $$__tape_$__data_ptr @ $__data_ptr; echo stack_ptr: $__stack_ptr"
