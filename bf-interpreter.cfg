
svar_set __bf_delay 1
svar_set __bf_dbg_hud 1000 // hud index

svar_set __empty ""
sar_function __tmp_cvar_save    cond "!?__tmp_init_cvar_$1=1" "svar_set __tmp_init_cvar_$1 1; svar_from_cvar __tmp_cvar_$1 $1"
sar_function __tmp_cvar_restore cond  "?__tmp_init_cvar_$1=1" "svar_set __tmp_init_cvar_$1 0; sar_expand $1 $$'$$__tmp_cvar_$1$$'"
sar_function run_quiet "__tmp_cvar_save sar_con_filter; __tmp_cvar_save sar_con_filter_default; sar_con_filter 1; sar_con_filter_default 0; $1 $+2; __tmp_cvar_restore sar_con_filter; __tmp_cvar_restore sar_con_filter_default"
sar_function less_than "svar_set less_than_ret 0; svar_set __tmp $1; svar_sub __tmp $2; svar_substr __tmp 0 1; cond ?__tmp=- svar_set less_than_ret 1"

// TODO: Input buffer
// i.e. Prompt for input as needed vs pre-supply input
// Currently only the former

// printing utils
svar_set __ascii_table " !_#_%&___*+,-./0123456789_______ABCDEFGHIJKLMNOPQRSTUVWXYZ______abcdefghijklmnopqrstuvwxyz_____"
sar_function __ascii_get "svar_set __ascii_idx $1; svar_sub __ascii_idx 32; svar_set __ascii_get_res $'$__ascii_table$'; sar_expand run_quiet svar_substr __ascii_get_res $$__ascii_idx 1; __ascii_check"
// bounds checking. if it's negative or the substring failed, print space
sar_function __ascii_check "svar_substr __ascii_idx 0 1; cond ?__ascii_idx=- svar_set __ascii_get_res $' $'; cond ?__ascii_get_res=?__ascii_table svar_set __ascii_get_res $' $'"

sar_function __bf_parse_new cond !?__parse_t=$1 __bf_parse_new_force $1
sar_function __bf_parse_new_force "cond !?__parse_t=-1 $'svar_add __parse_m 1; __bf_parse_new_force_h$'; svar_set __parse_t $1; svar_set __parse_v 0; svar_set __parse_m 0; svar_set __parse_e 0; __bf_parse_rel_bounds_h; svar_set __parse_s $'$'"
sar_function __bf_parse_new_force_h "svar_set __parse_t$__parse_l $__parse_t; svar_set __parse_v$__parse_l $__parse_v; svar_set __parse_m$__parse_l $__parse_m; svar_set __parse_p$__parse_l $__parse_e; svar_set __parse_s$__parse_l $'$__parse_s$'; svar_add __parse_l 1"
sar_function __bf_parse_rel_bounds "less_than $__parse_e $__parse_v; cond ?less_than_ret=1 $'svar_set __parse_v $__parse_e; __bf_parse_rel_bounds_h$'; less_than $__parse_m $__parse_e; cond ?less_than_ret=1 $'svar_set __parse_m $__parse_e; __bf_parse_rel_bounds_h$'"
sar_function __bf_parse_rel_bounds_h "svar_set __parse_r$__parse_l$-v$__parse_e 0"

sar_function __bf_parse_s svar_set __parse_s "$__parse_s$1"
sar_function __bf_parse_+ "__bf_parse_new <+->; sar_expand svar_add __parse_r$$__parse_l$$-v$$__parse_e 1; __bf_parse_s +"
sar_function __bf_parse_- "__bf_parse_new <+->; sar_expand svar_sub __parse_r$$__parse_l$$-v$$__parse_e 1; __bf_parse_s -"
sar_function __bf_parse_> "__bf_parse_new <+->; svar_add __parse_e 1; __bf_parse_rel_bounds; __bf_parse_s >"
sar_function __bf_parse_< "__bf_parse_new <+->; svar_sub __parse_e 1; __bf_parse_rel_bounds; __bf_parse_s <"
sar_function __bf_parse_[ "__bf_parse_new_force [; svar_add __stack_ptr 1; sar_expand svar_set __stack_$$__stack_ptr $$__parse_l; __bf_parse_s ["
sar_function __bf_parse_] "__bf_parse_new_force ]; sar_expand $'svar_set __parse_v $$__stack_$__stack_ptr; svar_set __parse_v$$__stack_$__stack_ptr $$__parse_l$'; svar_sub __stack_ptr 1; __bf_parse_s ]"
sar_function __bf_parse_. "__bf_parse_new_force .; __bf_parse_s ."
sar_function __bf_parse_, "__bf_parse_new_force ,; __bf_parse_s ,"
sar_function __bf_parse_  "__bf_parse_new ~; __bf_parse_new _"

sar_function __bf_bound "svar_add __tape_$1 1073741824; svar_mod __tape_$1 256"
sar_function __bf_exist cond ?__tape_$__data_ptr=?__empty svar_set __tape_$__data_ptr 0
sar_function __bf_exec_<+-> "svar_set __tmp $1; svar_set __tmp1 $__data_ptr; svar_add __tmp1 $1; __bf_exec_<+->_h; sar_expand svar_add __data_ptr $$__parse_p$__prgm_ptr; svar_set __tmp1 $__data_ptr; svar_add __tmp1 $1; svar_add __tmp1 __parse_m$__prgm_ptr; sar_expand less_than $$__tape_l $$__tmp1; cond ?less_than_ret=1 sar_expand svar_set __tape_l $$__tmp1"
sar_function __bf_exec_<+->_h cond !?__tmp=?__parse_m$__prgm_ptr "sar_expand svar_add __tape_$__tmp1 $$__parse_r$__prgm_ptr$-v$__tmp; __bf_bound $__tmp1; svar_add __tmp 1; svar_add __tmp1 1; __bf_exec_<+->_h"
sar_function __bf_exec_[   "cond  ?__tape_$__data_ptr=0 svar_set __prgm_ptr $1"
sar_function __bf_exec_]   "cond !?__tape_$__data_ptr=0 svar_set __prgm_ptr $1"
sar_function __bf_exec_.   "__bf_exist; sar_expand __ascii_get $$__tape_$__data_ptr; cond !?__tape_$__data_ptr=10 sar_expand sar_echo_nolf ffffff $'$$__ascii_get_res$'; cond ?__tape_$__data_ptr=10 sar_echo ffffff $'$'"
sar_function __bf_exec_,   "svar_set __bf_inputting 1; cond ?__bf_delay=0 $'__bf_debug_1; __bf_debug_2; __bf_debug_3$'"
sar_function __bf_exec_~   "hwait 30 __bf_debug_clear"

svar_set __tape_l 1
sar_function __bf_cleartape    "svar_set __bf_clear_i 0; __bf_cleartape_h; svar_set __tape_l 1"
sar_function __bf_cleartape_h  cond !?__bf_clear_i=?__tape_l "svar_set __tape_$__bf_clear_i 0; svar_add __bf_clear_i 1; __bf_cleartape_h"

sar_function bf_exec "__bf_cleartape; svar_set __bf_program $1; __bf_parse; __bf_exec"
sar_function bf_input cond ?__bf_inputting=1 "svar_set __tape_$__data_ptr $1; __bf_bound $__data_ptr; svar_set __bf_inputting 0; __bf_exec_loop"

// First, parse the program into 'instructions' (simplified structures for +/-/>/</. strings, pre-calculated loop pointers) i.e. 'compile'
// Then, execute the instructions i.e. 'fetch-execute cycle'
sar_alias __bf_parse "svar_set __prgm_ptr 0; svar_set __current_char a; svar_set __stack_ptr 0; svar_set __parse_t -1; svar_set __parse_v 0; svar_set __parse_l 0; __bf_parse_loop"
sar_alias __bf_exec  "svar_set __prgm_ptr 0; svar_set __data_ptr 0; svar_set __bf_inputting 0; __bf_exec_loop"

sar_function __bf_parse_loop cond !?__current_char=?__empty "svar_set __current_char $__bf_program; svar_substr __current_char $__prgm_ptr 1; sar_expand __bf_parse_$$__current_char; svar_add __prgm_ptr 1; __bf_parse_loop"
sar_function __bf_exec_loop  cond !?__prgm_ptr=?__parse_l   "sar_expand __bf_exec_$$__parse_t$__prgm_ptr $$__parse_v$__prgm_ptr; bf_debug; svar_add __prgm_ptr 1; cond ?__bf_inputting=0 hwait $__bf_delay __bf_exec_loop"

// debug function
sar_function bf_debug cond !?__bf_delay=0 "__bf_debug_1; __bf_debug_2; __bf_debug_3"
sar_function __bf_debug_1 "svar_set __bf_dbg_i $__bf_dbg_hud; svar_set __tmp $'$'; svar_set __tmp2 0; __bf_debug_1_h; sar_expand sar_hud_set_text $$__bf_dbg_i $'$$__tmp$'"
sar_function __bf_debug_1_h cond !?__tmp2=?__parse_l "cond ?__tmp2=?__prgm_ptr sar_expand svar_set __tmp $$'$$__tmp#00FF00$$'; sar_expand svar_set __tmp $$'$$__tmp$$__parse_s$__tmp2$$'; cond ?__tmp2=?__prgm_ptr sar_expand svar_set __tmp $$'$$__tmp#r$$'; svar_add __tmp2 1; __bf_debug_1_h"
sar_function __bf_debug_2 "svar_add __bf_dbg_i 1; svar_set __tmp $'$'; svar_set __tmp2 0; __bf_debug_2_h; sar_expand sar_hud_set_text $$__bf_dbg_i $'$$__tmp$'"
sar_function __bf_debug_2_h cond !?__tmp2=?__tape_l "cond ?__tmp2=?__data_ptr sar_expand svar_set __tmp $$'$__tmp#00FF00$$'; cond ?__tape_$__tmp2=?__empty svar_set __tape_$__tmp2 0; sar_expand svar_set __tmp $$'$$__tmp$$__tape_$__tmp2 $$'; cond ?__tmp2=?__data_ptr sar_expand svar_set __tmp $$'$$__tmp#r$$'; svar_add __tmp2 1; __bf_debug_2_h"
sar_function __bf_debug_3 "svar_add __bf_dbg_i 1; svar_set __tmp $'Unknown instruction$'; sar_expand $'svar_set __tmp2 $$__parse_t$__prgm_ptr; svar_set __tmp3 $$__parse_v$__prgm_ptr$'; __bf_debug_3_h; sar_expand sar_hud_set_text $$__bf_dbg_i $'$$__tmp$'"
sar_function __bf_debug_3_h "cond ?__tmp2=<+-> svar_set __tmp $'Doing arithmetic sequence$'; cond ?__tmp2=[ svar_set __tmp $'Opening loop to instruction $__tmp3$'; cond ?__tmp2=] svar_set __tmp $'Closing loop from instruction $__tmp3$'; cond ?__tmp2=. svar_set __tmp $'Printing $__tmp3 characters$'; cond ?__tmp2=~ svar_set __tmp $'Finished$'; cond ?__tmp2=, svar_set __tmp $'Waiting for input (bf_input <0-255>)$'"
sar_function __bf_debug_clear "svar_set __bf_dbg_i $__bf_dbg_hud; sar_hud_set_text $__bf_dbg_hud $'$'; svar_add __bf_dbg_i 1; sar_expand sar_hud_set_text $$__bf_dbg_i $'$'; svar_add __bf_dbg_i 1; sar_expand sar_hud_set_text $$__bf_dbg_i $'$'"
